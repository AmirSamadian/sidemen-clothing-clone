Entity Set Candidates: 

Product (This is like literary work in the library. It's the general product being sold)

Item (kind of like book in the library. This is the specific item being bought) 
    XXXX I don't think this will be necessary since we don't really care about a specific item. We just care about the overall data regarding the product. Unlike the library, we're not getting these items back, so there's not really a point in storing them in the database. It's best to just have an attribute in product keeping track of how many in stock. What about handling returns? Orders relationship could do this
    Maybe a database for the warehouse managing this business would require that info. Idk.

Collection  
    XXXX Probably best to just have this be an attribute of product since not much goes into a collection. You can still do the organizing of the website with collection as an attribute.

Category

    Three ways I could go about subcategories of products:
        1. I could have an entity set called product and an entity set called category   which says if it's a hoodie, sock, shoe, hat, necklace etc...
        This could be necessary because sizing is different for different categories of items
        2. The category could just be an attribute of the product called product_type. 
        3. Having the categories be specializations of product. I don't think this one is good because there will just be so many of them. 

Discount
    Product Discount, Collection Discount, Account discount (applied to cart)

        eligibility criteria

Account

Cart
    Probably starts out with a bunch of empty data and stuff gets added on??
    Is most of the stuff in here derived?
    Probably reference account it belongs to.
    Needs to store the items in the cart. 

        Alternative approach would be having a relationship set such as 
        Account Considers Product and the table created from that would be the stuff in the cart.

Orders
    XXXX This is more of a relationship. Account Orders Product. Or even, Account Orders Cart if we consider an order to be the whole cart. 


- I'm confused on orders and cart because these are things that come into play based on the user's interaction with the website. 


Reviews (add this to proposal also)


Product, Account, Discounts, Category, Cart


Account Orders Cart
Cart contains Product
Discount applied on Product
Discount applied on Cart
Product belongs to Category
Product added to Cart 







Entity Sets:

Account - This entity set stores the information for any user of the clothing website. Log-in details, payment details, address, etc...

Product - This entity set describes a general product being sold (items with the same name/type of thing we're selling) such as the "Y2K Orbit Hoodie". It doesn't describe a specific item (the single product that gets shipped out). This database doesn't keep track of specific items because they get shipped out and are then gone. 

Category - This entity set describes the types of products that the store has. Entities would look like... hoodie, socks, t-shirt, slides, necklace, etc. 

Order - This entity set describes an order that a user makes once they hit checkout. The order gets stored into the database once the user hits checkout. This is not a cart. A cart gets handled by javascript code on the client side. Adding and removing products from the

Discounts - This entity set describes the different types of discounts the store may offer. They could be applied on an entire cart when making an order or they could be applied to a product or products that share an attribute.


Relationship Sets:

Account creates cart?  XXXXX

[T] Account [1] Owns [1] Cart [T] XXXXXX

Participation explanation: Every account, as soon as created, owns a cart. So account is total. If a cart exists, it belongs to an account. So cart is total

Cardinality explanation: An account only owns 1 cart and can't have more than 1 cart associated with it so cart is 1. A cart only belongs to 1 account so account is 1.


????? IDEA: An alternative approach for keeping the user's cart items in their cart when they re log-in to the website without caching or using tokens. I think this will only work for people with accounts but it may not work at all so please let me know. Suppose I included the entity set cart and had the relationship set Account Owns Cart and a separate relationship set Account Orders Cart. The idea is to use the database to keep track of the items in the user's cart. Every time they add an item to it or remove an item from it, the code sends an update request to change the table made from Cart contains Product. The cart is linked to the account so when an account signs in another day, it loads in their cart from the database. When a user makes an order, their cart is cleared and reused. This will lead to Account 

-----------------------------------------------------------------

[P] Account [1] Orders [M] Order [P]

Participation explanation: An account doesn't need to order a cart and a cart doesn't need to get ordered. It could just be a cart that got forgetten about. So both are partial. 

Cardinality explanation: A cart cannot be ordered by multiple accounts. Even if the cart has the same exact items, no 2 carts are the same. So account is 1. An account can order many carts over time so cart is many.

-----------------------------------------------------------------

[P] Cart [M] contains [M] Product [P]

Participation explanation: A cart doesn't need to have a product in it so it's partial. And a  product doesn't have to be in a cart so it's partial.

Cardinality explanation: A cart can have many products in it so product is many. A product could be in many different people's carts so cart is many.

-----------------------------------------------------------------

[T] Product [M] belongs to [1] Category [P]

Participation explanation: If a product exists in the store, it belongs to some category, so product is total. There is a case where a category has been made (shoe) but they haven't released any specific shoes yet. So it's best to have category be partial.

Cardinality explanation: A category can have many products in it so product is many. A product can't be a hoodie and a sock at the same time. Each product belongs to only 1 category so category is 1. 

-----------------------------------------------------------------

Product added to Cart????
Product removed from Cart????

I think "cart contains product" gets rid of both of these. Can just code remove and add to delete the product from that table.

-----------------------------------------------------------------

[P] Account [M] Reviews [M] Product [P]

Participation explanation: An account doesn't have to review a product and a product doesn't have to  have a review so both partial

Cardinality explanation: Many accounts can review a product so product is many. Many An account can review many products so account is many. 

-----------------------------------------------------------------

[P] Discount applied on Product

Participation explanation: Not all discounts are applied on a product. 

Cardinality explanation: 

[P] Discount [1] applied on [M] Cart [P]

Participation explanation: Not all discounts are applied on a cart. There are discounts that have not been applied yet. Not all carts have discounts applied to them. So both partial

Cardinality explanation: A discount can be applied on many people's carts so cart is many. I don't wan't to allow the possibility of more than 1 discount being applied to a cart so discount will be 1. A cart can only take 1 cart discount. 


Attributes:

    Account
        - account_id (primary key)
        - email
        - password
        - name {first_name, last_name}
        - phone_number
        - date_created
        - address {country, state, city, street, zip_code, level}

    Cart
        - cart_id (primary key)
        - total_price 
        - num_of_items 

    Note: both total_price and num_of_items could be considered derived as they depend on when items are added or removed from the cart, but I think it's best to store them and update them than to not have them in the database. This is also useful for making simple comparisons for discount eligibility_criteria.

    Prodcut
        - product_id (primary key)
        - product_name
        - collection_name
        - price
        - size [M]
        - color [M]
        - intended_gender
        - description
        - images [Multi-valued]
        - num_in_stock
        - release_time --> date and time
        - termination_time --> date and time

            ??Do I have to make an entity for each color-size combination!? how do I handle this??

    Category
        - category_id (primary key)
        - category_name
        - size_type --- different for jewelry, shirts, shoes

    Discount
        - discount_id (primary key)
        - discount_name
        - discount_code
        - percent_off
        - dollars_off  --> null if a percentage discount
        - eligibility_criteria
        - release_time
        - duration
        end time is derived

Relationship Attributes: 

    Account Orders Cart
        - payment_details {card_num, exp_date, security_code, name}
        - order_status  --- is it pending or complete  (won't be needed if doing order instead of cart)
        - order_timestamp
        - shipment_price
        - shipment_type
        - expected_delivery 

    Account Reviews Product
        - review_id
        - rating --> must be 1-5 stars
        - review_description --> user types this in and if they hit enter it gets stored into database. Otherwise null

    * I  don't wan't to account for paypal anymore. So much goes into handling that website redirection safely. 


Remaining Questions and Conerns:

1. I want it to be possible to browse the website, add items to cart, and make orders without having to make an account right off the bat. How would I go about this?

Any user will have to end up giving the information needed for an account when they checkout. But it's not needed to make an account upon clicking the website link and there is already a cart for you. I think as long as cart is configured so that it exists without needing to create an account, I'll be good. 

The cart is handled in javascript so it won't affect the databse. This isn't a database issue. Cart's only become part of the database when they are ordered.


2. How does an entity set like cart work? It's so dependant on how the user interacts with the website. 

3. Save a payment method to an account so they don't have to enter every time.    (you would need to create a new entity set called payment details and account uses payment details. Im gonna ignore this functionallity for now.)


[T] Account [M] uses [M] PaymentMethod [T]

Participation: Account is total. If an account exists, it has a payment method because this gets created when they make an order. Before the user makes an order, they don't have an account. ALl paymentMethods belong to some account so paymentMethod is also total.

Cardinality: an account can have many paymentMethods stored for them. Every time they make an order with a different payment method, it gets stored for them. So payment method is many. The same paymentMethod can be used by 2 accounts. say me and my mom both buy something and we make those orders with the same credit card. So account is many.

You would also need to have a relationship attribute for account orders order to link the 


removed:

    Specializations:
        Product Discount - Discount applied on a product. The discount may be on 1 product, on products of the same category, or on products of same collection. 

        Cart Discount - Discount applied on a whole cart. May need some eligibility criteria such as minimum part price. 