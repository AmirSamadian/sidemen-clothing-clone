

Entity Sets:

Account - This entity set stores the information for any user of the clothing website. Log-in details, payment details, address, etc...

Product - This entity set describes a general product being sold (type of thing we're selling) such as the "Y2K Orbit Hoodie". 
It doesn't describe a specific item (the single product that gets shipped out). This database doesn't keep track of specific items because they get shipped 
out and are then gone. Each color-size combination is a different entity of this entity set.

Category - This entity set describes the types of products that the store has. Entities would look like... hoodie, socks, t-shirt, slides, necklace, etc. 

Order - This entity set describes an order that a user makes once they hit checkout. The order gets stored into the database 
once the user hits checkout. This is not a cart. A cart gets handled by javascript code on the client side. Adding and removing
products from the cart is handled by javascript code. 

Discounts - This entity set describes the different types of discounts the store may offer. They could be applied on an entire order  
or they could be applied to a product or products that share an attribute.

----------------------------------------------------------------------------------------

Relationship Sets:

[P] Account [1] orders [M] Order [T]

Participation explanation: An account doesn't need to order an order so account is partial. If an order was made, it was made by an account since it's required to enter information when you checkout. So Order is total.

Cardinality explanation: The same order cannot be ordered by multiple accounts. Even if the order has the same exact items, no 2 orders are the same. So account is 1. An account can order many orders over time so order is many.

----------------------------------------------------------------------------------------

[P] Order [M] contains [M] Product [P]

Participation explanation: An order doesn't need to have a product in it so it's partial. And a  product doesn't have to be in an order so it's partial.

Cardinality explanation: An order can have many products in it so product is many. A product could be in many different people's orders so order is many.

----------------------------------------------------------------------------------------

[T] Product [M] belongs to [1] Category [P]

Participation explanation: If a product exists in the store, it belongs to some category, so product is total. There is a case where a category has been made (shoe) but they haven't released any specific shoes yet. So it's best to have category be partial.

Cardinality explanation: A category can have many products in it so product is many. A product can't be a hoodie and a sock at the same time. Each product belongs to only 1 category so category is 1. 

----------------------------------------------------------------------------------------

[P] Account [M] reviews [M] Product [P]

Participation explanation: An account doesn't have to review a product and a product doesn't have to have a review so both partial

Cardinality explanation: Many accounts can review a product so product is many. An account can review many products so account is many. 

----------------------------------------------------------------------------------------

[P] Discount [1] applied on [M] Order [P]

Participation explanation: Not all discounts are applied on an order. There are discounts that have not been applied yet. Not all orders have discounts applied to them. So both partial

Cardinality explanation: A discount can be applied on many people's orders so order is many. I don't wan't to allow the possibility of more than 1 discount being applied to an order so discount will be 1. An order can only take 1 order discount. 

----------------------------------------------------------------------------------------

[P] Discount [1] applied on [M] Product [P]

Participation explanation: Not all discounts are applied on a product so discount is partial. Not al products have a discount so product is partial.

Cardinality explanation: A discount can be applied on many products so product is many. I don't wanna allow the possibility of multiple discounts account on 1 product so discount is 1.

----------------------------------------------------------------------------------------



Attributes:

    Account
        - account_id (primary key)
        - email
        - password
        - name {first_name, last_name}
        - phone_number
        - date_created
        - address {country, state, city, street, zip_code, level}

    Order
        - order_id (primary key)
        - total_price 
        - order_timestamp
        - num_of_items 
        - shipment_price
        - shipment_company   (how is it getting to the customer)
        - expected_delivery 

    Note: both total_price and num_of_items could be considered derived as they depend on when items 
    are added or removed from the cart, but I think it's best to store them and update them than to not 
    have them in the database. This is also useful for making simple comparisons for discount eligibility_criteria.

    Prodcut
        - product_id (primary key)
        - product_name
        - collection_name
        - price
        - size [Multi-valued]
        - color [Multi-valued]
        - intended_gender
        - description
        - images [Multi-valued]
        - num_in_stock
        - release_time --> date and time
        - termination_time --> date and time

    Category
        - category_id (primary key)
        - category_name

    Discount
        - discount_id (primary key)
        - discount_name
        - discount_code
        - percent_off
        - dollars_off  --> null if a percentage discount
        - eligibility_criteria      (ex. order must be abovd $20 to get discount)
        - release_time
        - duration
        end time is derived no need to store it

Relationship Attributes: 

    Account orders Order
        - payment_details {card_num, exp_date, security_code, name}

    Account Reviews Product
        - review_id
        - rating --> must be 1-5 stars
        - review_description --> user types this in and if they hit enter it gets stored into database. Otherwise null

    * I  don't wan't to account for paypal anymore. So much goes into handling that website redirection safely. 

    Order contains Product
        - quantity




